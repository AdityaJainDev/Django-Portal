---
image: registry.aditsystems.de/as-crm/portal:5ae845b8

variables:
  SONAR_URL: https://sonarqube.aditsystems.de
  SONAR_USER_HOME: "${CI_PROJECT_DIR}/${CACHE_DIR}/sonar"
  SONAR_IMAGE: "$CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX/sonarsource/sonar-scanner-cli:latest"
  CI_BUILD_REF: "${CI_COMMIT_SHA}"
  CI_BUILD_REF_NAME: "${CI_COMMIT_REF_NAME}"
  SONAR_GITLAB_PROJECT_ID: "${CI_PROJECT_URL}"
  VERBOSITY:
    value: "2"
    description: "Django Test Verbositoy"
  K8S_VERSION: "alpine/k8s:1.23.7"
  IMAGE_SHA: "$CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA"
  IMAGE_BRANCH: "${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_NAME}"
  KUBE_CONTEXT: "as-crm/portal:k8s-portal"

stages:
  - test
  - build
  - release
  - deploy
cache:
  paths:
    - "~/.cache/pip/"
test:pylint:
  stage: test
  before_script:
    - apk add bash
    - /usr/local/bin/python -m pip install --upgrade pip
    - pip install -r requirements-frozen.txt
  script:
    - bash ./bin/pylint.sh
  only:
    changes:
      - "**/*.py"
    refs:
      - merge_requests
      - main
      - develop
  artifacts:
    paths:
      - pylint.txt


.test:django_check:
  stage: test
  services:
    - name: "$CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX/postgres:11"
      alias: postgres
  only:
    - merge_requests
    - main
  before_script:
    - python -V
    - pip install -r requirements-frozen.txt
  script:
    - touch Portal.local_settings.py
    - coverage run --branch manage.py test \
      --settings Portal.settings_ci -v $VERBOSITY
    - coverage xml
    - python manage.py check
  allow_failure: true

test:django:
  stage: test
  services:
    - name: postgres:11
      alias: db
  variables:
    POSTGRES_DB: nice_marmot
    POSTGRES_USER: runner
    POSTGRES_PASSWORD: "password"
    POSTGRES_HOST_AUTH_METHOD: trust
  only:
    - merge_requests
    - main
  before_script:
    - python -V
    - pip install -r requirements-frozen.txt
  script:
    - touch Portal.local_settings.py
    - django-admin compilemessages
    - coverage run --branch manage.py test
      --settings Portal.settings_ci -v $VERBOSITY
    - coverage xml
  artifacts:
    paths:
      - coverage.xml

test:sonarqube:
  stage: test
  image:
    name: $SONAR_IMAGE
    entrypoint:
      - ''
  variables:
    GIT_DEPTH: 0
  script:
    - sonar-scanner -Dsonar.qualitygate.wait=true
  only:
    - merge_requests
    - main
  cache:
    policy: pull

dockerimage:build:
  image: "$CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX/docker:latest"
  stage: build
  services:
    - "$CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX/docker:dind"
  rules:
    - if: "$CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  before_script:
    - echo $CI_REGISTRY_PASSWORD | docker login --username "$CI_REGISTRY_USER"
      --password-stdin $CI_REGISTRY
  script:
    - docker pull $IMAGE_BRANCH || true
    - docker build --cache-from $IMAGE_BRANCH --tag $IMAGE_SHA .
    - docker push $IMAGE_SHA
    - docker tag $IMAGE_SHA $IMAGE_BRANCH
    - docker push $IMAGE_BRANCH


.deploy: &deploy
  stage: deploy
  image:
    name: $K8S_VERSION
    entrypoint: ['']
  before_script:
    - kubectl config get-contexts
    - if [ -n "$KUBE_CONTEXT" ]; then kubectl config
      use-context "$KUBE_CONTEXT"; fi
  script:
    - if [ -n "$TRACE" ]; then envsubst < Helm/values_env.yaml | helm template
      --debug
      --namespace "$NAME_SPACE" --create-namespace --wait
      --set image.tag=$CI_COMMIT_SHORT_SHA -f ./Helm/values.staging.yaml
      --values - portal ./Helm;
      fi
    - if [ -n "$TRACE" ]; then envsubst < Helm/values_env.yaml | helm upgrade
      --install --dry-run --debug
      --namespace "$NAME_SPACE" --create-namespace --wait --reuse-values
      --set image.tag=$CI_COMMIT_SHORT_SHA -f ./Helm/values.staging.yaml
      --values - portal ./Helm;
      fi
    - envsubst < Helm/values_env.yaml | helm upgrade --install
      --namespace "$NAME_SPACE" --create-namespace --wait --reuse-values
      --set image.tag=$CI_COMMIT_SHORT_SHA -f ./Helm/values.staging.yaml
      --values - portal ./Helm
    - kubectl logs --selector=app=portal -n "$NAME_SPACE"

kubectl:deploy_staging:
  <<: *deploy
  rules:
    - if: "$CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH"
  environment:
    name: staging
    url: $STAGING_CI_ENVIRONMENT_URL

kubectl:reset_staging:
  <<: *deploy
  when: manual
  rules:
    - if: "$CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH"
  script:
    - helm rollback "portal" 0 -n "$NAME_SPACE"
    - kubectl logs --selector=app=portal -n "$NAME_SPACE"
  environment:
    name: staging

kubectl:deploy_prod:
  <<: *deploy
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - if [ -n "$TRACE" ]; then envsubst < Helm/values_env.yaml | helm upgrade
      --install --dry-run --debug
      --namespace "$NAME_SPACE" --create-namespace --wait --reuse-values
      --set image.tag=$CI_COMMIT_SHORT_SHA -f ./Helm/values.production.yaml
      --values - portal ./Helm;
      fi
    - envsubst < Helm/values_env.yaml | helm upgrade --install
      --namespace "$NAME_SPACE" --create-namespace --wait --reuse-values
      --set image.tag=$CI_COMMIT_SHORT_SHA -f ./Helm/values.production.yaml
      --values - portal ./Helm
    - kubectl logs --selector=app=portal -n "$NAME_SPACE"
  environment:
    name: production
    url: $PROD_CI_ENVIRONMENT_URL

kubectl:reset_prod:
  <<: *deploy
  when: manual
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - helm rollback "portal" 0 -n "$NAME_SPACE"
    - kubectl logs --selector=app=portal -n "$NAME_SPACE"
  environment:
    name: production
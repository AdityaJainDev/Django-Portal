image: registry.aditsystems.de/as-crm/portal:latest
variables:
  SONAR_URL: https://sonarqube.aditsystems.de
  SONAR_USER_HOME: ${CI_PROJECT_DIR}/${CACHE_DIR}/sonar
  CI_BUILD_REF: ${CI_COMMIT_SHA}
  CI_BUILD_REF_NAME: ${CI_COMMIT_REF_NAME}
  SONAR_GITLAB_PROJECT_ID: ${CI_PROJECT_URL}
  VERBOSITY: 2
  TEST_IMAGE: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME
  RELEASE_IMAGE: $CI_REGISTRY_IMAGE:latest


stages:
  - test
  - build

cache:
  paths:
  - ~/.cache/pip/

test:pylint:
  stage: test
  before_script:
    - pip install -r requirements-frozen.txt
  script:
    - bash ./bin/pylint.sh
  only:
    changes:
      - '**/*.py'
    refs:
      - merge_requests
      - main
      - develop
  artifacts:
    paths:
    - pylint.txt


test:django_check:
  stage: test
  only:
    - merge_requests
    - main
  before_script:
    - python -V
    - pip install -r requirements-frozen.txt
  script:
    - touch Portal.local_settings.py
    - python manage.py check

test:django:
  stage: test
  only:
    - merge_requests
    - main
  before_script:
    - python -V
    - pip install -r requirements-frozen.txt
  script:
    - touch Portal.local_settings.py
    - django-admin compilemessages
    - coverage run --branch manage.py test --settings Portal.settings_ci -v $VERBOSITY
    - coverage xml
  artifacts:
    paths:
    - coverage.xml

test:sonarqube:
  stage: test
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  variables:
    GIT_DEPTH: 0
  script:
    - sonar-scanner -Dsonar.qualitygate.wait=true
  only:
    - merge_requests
    - main
  cache:
    policy: pull

dockerimage:build:
  image: docker:latest
  services:
    - docker:dind
  stage: build
  before_script:
    - echo $CI_REGISTRY_PASSWORD | docker login --username "$CI_REGISTRY_USER" --password-stdin $CI_REGISTRY
  script:
    - docker pull $RELEASE_IMAGE || true
    - docker build --cache-from $RELEASE_IMAGE --tag $TEST_IMAGE .
    - docker push $TEST_IMAGE
  
dockerimage:release:
  image: docker:latest
  services:
    - docker:dind
  only:
    - dockerbuild
  stage: release
  needs:
    - dockerimage:build
  before_script:
    - echo $CI_REGISTRY_PASSWORD | docker login --username "$CI_REGISTRY_USER" --password-stdin $CI_REGISTRY
  script:
    - docker pull $TEST_IMAGE
    - docker tag $TEST_IMAGE $RELEASE_IMAGE
    - docker push $RELEASE_IMAG
